// AUTO-GENERATED by protoc-gen-webviewrpc
// (C) "Server" side: Base class + static binder

// import { ServiceDefinition } from './ServiceDefinition.js'; // (제작자가 별도 관리)
{{range .Methods}}
// import { {{.InputType}}, {{.OutputType}} } from './...'; // 메시지 import (선택)
{{end}}

/**
 * 추상 클래스 (C#의 {{.ServiceName}}Base)
 * 사용자(서버구현자)는 이 클래스를 상속해서 실제 로직을 override한다.
 */
export class {{.ServiceName}}Base {
  {{range .Methods}}
  {{.MethodName}}(requestObj) {
    // requestObj = JS object (이미 decode된)
    throw new Error("{{.MethodName}} not implemented");
  }
  {{end}}
}

/**
 * static BindService, (C#의 {{.ServiceName}}.BindService(impl))
 * - impl: {{.ServiceName}}Base 구현체
 * - return: ServiceDefinition(methodHandlers)
 */
export class {{.ServiceName}} {
  static bindService(impl) {
    const def = {
      methodHandlers: {}
    };

    {{range .Methods}}
    def.methodHandlers["{{$.ServiceName}}.{{.MethodName}}"] = (reqBytes) => {
      // 1) decode reqBytes => requestObj
      //    (예: const req = {{.InputType}}.decode(reqBytes))
      const reqObj = decode{{.InputType}}(reqBytes); // 가정
      // 2) call impl.{{.MethodName}}(reqObj)
      const resObj = impl.{{.MethodName}}(reqObj);
      // 3) encode resObj => Uint8Array
      const resBytes = encode{{.OutputType}}(resObj); // 가정
      return resBytes;
    };
    {{end}}

    return def;
  }
}
